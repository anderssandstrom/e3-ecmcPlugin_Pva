###############################################################################
# Example of pv access fucntions in ecmcPlugin_Utils
# The pvAccess commands can take "long" time, which can disturb the realtime
# thread, and is therefore executed async in a separate thread.
#
# Workflow for a "pv_get()" operation:
#  1: Regsiter PV with pv_reg_async() command (returns handle)
#  2: Wait for pv_reg_async() to finish (pv_busy())
#  3: Initiate async read command with pv_get_async())
#  4: Wait for pv_get_async() to finish (pv_busy())
#  5: Get last read value with pv_value().
#  6: Goto 3 (read again)
#
# Workflow for a "pv_put()" operation:
#  1: Regsiter PV with pv_reg_async() command (returns handle)
#  2: Wait for pv_reg_async() to finish (pv_busy())
#  3: Initiate async write command with pv_put_async())
#  4: Wait for pv_put_async() to finish (pv_busy())
#  5: Goto 3 (write again)
#
###############################################################################

static.AI:=static.AI+1;
static.BI:=not(static.BI);

var error:=0;

####### READ PV IOC_TEST:AI ###################################################

# Register pv IOC_TEST:AI when ecmc ioc has started
if(ioc_get_started() and static.aiHandle=0) {
  static.aiHandle:=pv_reg_async('IOC_TEST:AI','pva');
  if(static.aiHandle < 0) {
    ${DBG=#}println('Failed reg IOC_TEST:AI');
  };
};

# Read value of "IOC_TEST:AI" when registered
if(static.aiHandle > 0) {
  var retPvGet:=pv_value(static.aiHandle);
  # Start new read if not busy
  if(not(pv_busy(static.aiHandle))) {
    error:=pv_get_async(static.aiHandle);
    ${DBG=#}println('Busy after pv_get_async(): ', pv_busy(static.aiHandle));
  } else {
    ${DBG=#}println('Still busy pv_get_async()...');
  };
  ${DBG=#}println('AI from PV:', retPvGet);
  ${DBG=#}println('AI in PLC :', static.AI);
};

####### WRITE PV IOC_TEST:AO ##################################################

# Register pv IOC_TEST:AO when ecmc ioc has started
if(ioc_get_started() and static.aoHandle=0) {
  static.aoHandle:=pv_reg_async('IOC_TEST:AO','pva');
  if(static.aoHandle < 0) {
    ${DBG=#}println('Failed reg IOC_TEST:AO');
  };

};

# Write value of "IOC_TEST:AO" when registered
if(static.aoHandle > 0) {
  # Start new write if not busy
  if(not(pv_busy(static.aoHandle))) {
    error:=pv_put_async(static.aoHandle,static.AI);
    ${DBG=#}println('Busy after pv_put_async(): ', pv_busy(static.aoHandle));
  }else {    
    ${DBG=#}println('Still busy pv_put_async()...');
  }  
  ${DBG=#}println('AO to PV  :', static.AI);
  ${DBG=#}println('AO from PV:', static.AO);
};

####### READ PV IOC_TEST:BI ###################################################

# Register pv IOC_TEST:BI when ecmc ioc has started
if(ioc_get_started() and static.biHandle=0) {
  static.biHandle:=pv_reg_async('IOC_TEST:BI','pva');
  if(static.biHandle < 0) {
    ${DBG=#}println('Failed reg IOC_TEST:BI');
  };
};

# Read value of "IOC_TEST:BI" when registered
if(static.biHandle > 0) {
  var retPvBIGet:=pv_value(static.biHandle);
  # Start new read if not busy
  if(not(pv_busy(static.biHandle))) {
    error:=pv_get_async(static.biHandle);
    ${DBG=#}println('Busy after pv_get_async(): ', pv_busy(static.biHandle));
  } else {
    ${DBG=#}println('Still busy pv_get_async()...');
  };
  ${DBG=#}println('BI from PV:', retPvBIGet);
  ${DBG=#}println('BI in PLC :', static.BI);
};

####### WRITE PV IOC_TEST:BO ##################################################

# Register pv IOC_TEST:BO when ecmc ioc has started
if(ioc_get_started() and static.boHandle=0) {
  static.boHandle:=pv_reg_async('IOC_TEST:BO','pva');
  if(static.boHandle < 0) {
    ${DBG=#}println('Failed reg IOC_TEST:BO');
  };
};

# Write value of "IOC_TEST:BO" when registered
if(static.boHandle > 0) {
  # Start new write if not busy
  if(not(pv_busy(static.boHandle))) {
    error:=pv_put_async(static.boHandle,static.BI);
    ${DBG=#}println('Busy after pv_put_async(): ', pv_busy(static.boHandle));
  }else {    
    ${DBG=#}println('Still busy pv_put_async()...');
  }  
  ${DBG=#}println('BO to PV  :', static.BI);
  ${DBG=#}println('BO from PV:', static.BO);
};

###############################################################################
# Example of pv access fucntions in ecmcPlugin_Utils
# The pvAccess commands can take "long" time, which can disturb the realtime
# thread, and is therefore executed asyn in a separate thread.
#
# Workflow for a "pv_get()" operation:
#  1: Regsiter PV with pv_reg_asyn() command (returns handle)
#  2: Wait for pv_reg_asyn() to finish (pv_busy())
#  3: Initiate asyn read command with pv_get_asyn())
#  4: Wait for pv_get_asyn() to finish (pv_busy())
#  5: Get last read value with pv_value().
#  6: Goto 3 (read again)
#
# Workflow for a "pv_put()" operation:
#  1: Regsiter PV with pv_reg_asyn() command (returns handle)
#  2: Wait for pv_reg_asyn() to finish (pv_busy())
#  3: Initiate asyn write command with pv_put_asyn())
#  4: Wait for pv_put_asyn() to finish (pv_busy())
#  5: Goto 3 (write again)
#
###############################################################################

static.AI:=static.AI+1;
#static.BI:=not(static.BI);

var error:=0;

####### READ PV IOC_TEST:AI ###################################################

# Register pv IOC_TEST:AI when ecmc ioc has started
if(ioc_get_started() and static.aiHandle=0) {
  static.aiHandle:=pv_reg_asyn('IOC_TEST:AI','pva');
  if(static.aiHandle < 0) {
    static.failCount +=1; 
    println('Failed reg IOC_TEST:AI, fail count:', static.failCount);
    # Test to register again
    static.aiHandle:=0;
  };
};

# Read value of "IOC_TEST:AI" when registered (auto updates via monitor)
if(static.aiHandle > 0) {
  if(pv_connected(static.aiHandle)) {
    # Value auto update by monitor.
    var retPvGet:=pv_value(static.aiHandle);    
    ${DBG=#}println('AI from PV:', retPvGet);
    ${DBG=#}println('AI in PLC :', static.AI);
  };
};

####### WRITE PV IOC_TEST:AO ##################################################

# Register pv IOC_TEST:AO when ecmc ioc has started
if(ioc_get_started() and static.aoHandle=0) {
  static.aoHandle:=pv_reg_asyn('IOC_TEST:AO','pva');
  if(static.aoHandle < 0) {
    static.failCount +=1; 
    println('Failed reg IOC_TEST:AO, fail count:', static.failCount);
    # Test to reg again
    static.aoHandle:=0;
  };
};

# Write value of "IOC_TEST:AO" when registered
if(static.aoHandle > 0) {
  if(pv_connected(static.aoHandle)) {
    # Start new write if not busy
    if(not(pv_busy(static.aoHandle))) {
      error:=pv_put_asyn(static.aoHandle,static.AI);
      ${DBG=#}println('Busy after pv_put_asyn(): ', pv_busy(static.aoHandle));
    }else {    
      ${DBG=#}println('Still busy pv_put_asyn()...');
    }  
    ${DBG=#}println('AO to PV  :', static.AI);
    ${DBG=#}println('AO from PV:', static.AO);
  };
};

####### READ PV IOC_TEST:BI ###################################################

# Register pv IOC_TEST:BI when ecmc ioc has started
if(ioc_get_started() and static.biHandle=0) {
  static.biHandle:=pv_reg_asyn('IOC_TEST:BI','pva');
  if(static.biHandle < 0) {
    static.failCount +=1; 
    println('Failed reg IOC_TEST:BI, fail count:', static.failCount);
    # Test to reg again
    static.biHandle:=0;
  };  
};

# Read value of "IOC_TEST:BI" when registered (auto updates via monitor)
if(static.biHandle > 0) {
  if(pv_connected(static.biHandle)) {
    var retPvBIGet:=pv_value(static.biHandle);
    ${DBG=#}println('BI from PV:', retPvBIGet);
    ${DBG=#}println('BI in PLC :', static.BI);
  };
};

####### WRITE PV IOC_TEST:BO ##################################################

# Register pv IOC_TEST:BO when ecmc ioc has started
if(ioc_get_started() and static.boHandle=0) {
  static.boHandle:=pv_reg_asyn('IOC_TEST:BO','pva');
  if(static.boHandle < 0) {
    static.failCount +=1; 
    println('Failed reg IOC_TEST:BO, fail count:', static.failCount);
    # Test to reg again
    static.boHandle:=0;
  };
};

# Write value of "IOC_TEST:BO" when registered
if(static.boHandle > 0) {
  if(pv_connected(static.boHandle)) {
    # Start new write if not busy
    if(not(pv_busy(static.boHandle))) {
      static.BI:=not(static.BI);
      error:=pv_put_asyn(static.boHandle,static.BI);
      ${DBG=#}println('Busy after pv_put_asyn(): ', pv_busy(static.boHandle), ', err: ', pv_err(static.boHandle));
    }else {    
      ${DBG=#}println('Still busy pv_put_asyn()...');
    }  
    ${DBG=#}println('BO to PV  :', static.BI);
    ${DBG=#}println('BO from PV:', static.BO);
  };
};

###############################################################################
# Example of pv access fucntions in ecmcPlugin_Utils
# The pvAccess commands can take "long" time, which can disturb the realtime
# thread, and is therefore executed async in a separate thread.
#
# Workflow for a "pv_get()" operation:
#  1: Regsiter PV with pv_reg_async() command (returns handle)
#  2: Wait for pv_reg_async() to finish (pv_busy())
#  3: Initiate async read command with pv_get_async())
#  4: Wait for pv_get_async() to finish (pv_busy())
#  5: Get last read value with pv_value().
#  6: Goto 3 (read again)
#
# Workflow for a "pv_put()" operation:
#  1: Regsiter PV with pv_reg_async() command (returns handle)
#  2: Wait for pv_reg_async() to finish (pv_busy())
#  3: Initiate async write command with pv_put_async())
#  4: Wait for pv_put_async() to finish (pv_busy())
#  5: Goto 3 (write again)
#
###############################################################################

static.AI:=static.AI+1;
var error:=0;

# Register pv IOC_TEST:AI when ecmc ioc has started
if(ioc_get_started() and static.aiHandle<=0) {
  static.before1:=ec_get_time();
  static.aiHandle:=pv_reg_async('IOC_TEST:AI','pva');
  static.after1:=ec_get_time();
  ${DBG=#}println('pv_reg_async AI exe time [ns] : ', static.after1-static.before1);
};

# Read value of "IOC_TEST:AI" when registered
if(static.aiHandle > 0) {
  var retPvGet:=pv_value(static.aiHandle);
  # Start new read if not busy
  if(not(pv_busy(static.aiHandle))) {
    static.before2:=ec_get_time();
    error:=pv_get_async(static.aiHandle);
    ${DBG=#}println('Busy after pv_get_async(): ', pv_busy(static.aiHandle));
    static.after2:=ec_get_time();
    ${DBG=#}println('pv_get exe time [ns] : ', static.after2-static.before2);
  };
  ${DBG=#}println('AI from PV:', retPvGet);
  ${DBG=#}println('AI in PLC :', static.AI);
};

# Register pv IOC_TEST:AO when ecmc ioc has started
if(ioc_get_started() and static.aoHandle<=0) {
  static.before3:=ec_get_time();
  static.aoHandle:=pv_reg_async('IOC_TEST:AO','pva');
  static.after3:=ec_get_time();
  ${DBG=#}println('pv_reg_async AO exe time [ns] : ', static.after3-static.before3);
};

# Write value of "IOC_TEST:AO" when registered
if(static.aoHandle > 0) {
  # Start new write if not busy
  if(not(pv_busy(static.aoHandle))) {
    static.before4:=ec_get_time();
    error:=pv_put_async(static.aoHandle,static.AI);
    ${DBG=#}println('Busy after pv_put_async(): ', pv_busy(static.aoHandle));
    static.after4:=ec_get_time();
    ${DBG=#}println('pv_put exe time [ns] : ', static.after4-static.before4);
  }  
  ${DBG=#}println('AO to PV:', static.AI);
  ${DBG=#}println('AO from PV:', static.AO);
};
